Databse Analysis and Visualisation Scripts. 
Readme File (readme.txt).
Author: Jake Hashim-Jones (12/09/2017)


Contents:
	1. Description
		1.1 db_create.py Description
		1.2 sql_temp.py Description
		1.3 excel_temp.py Description
		1.4 numpy_temp.py Description
	2. Requirements and Assumptions
		2.1 General Requirements
		2.2 db_create.py Requirements
		2.3 sql_temp.py Requirements
		2.4 excel_temp.py Requirements
		2.5 numpy_temp.py Requirements
	3. Usage Guide (All scripts)
	4. Additional Notes
		4.1 File Handling
		4.2 Missing Data
		4.3 Caching - IMPORTANT


1 - Description
The software suite consists of four (4) different scripts. Each related to the
task of processing global temperature data in that has been provided by three
excel workbook files (outlined in section 2.2 of this document).

The scripts included in this bundle are as follows.

	db_create.py - Access the workbooks and create the database.
	sql_temp.py - Modify the database and obtain local statistics.
	excel_temp.py - Use excel to process and represent the data via python. 
	numpy_temp.py - Perform advanced data analysis using NumPy module.


1.1 - db_create.py Description

	This script imports the data from three excel workbook files (detailed
	in section 2.2 of this document), designs and implements a database 
	schema (involving three tables: 'Country', 'MajorCity' and 'State', 
	and adds data from these workbooks into the newly created database
	schema.

	The database is saved locally as 'Temperature_Data.db'


1.2 - sql_temp.py Description

	This script queries the database and finds information regarding the	
	distinctive major cities of the Southern hemisphere. It then creates
	a new table in the database ('Southern Cities') and adds the retrieved 
	data to it (including name, country and geolocation).

	This script also finds the maximum, minumum and average temperatures
	for Queensland (Australia) for the year 2000 and prints this information
	to the python console.


1.3 - excel_temp.py Description

	This script creates a new workbook (or opens an existing one) called
	"World Temperature.xlsx". It then creates a worksheet (or replaces an 
	existing one) called 'Temperature By City'.

	The script then retrieves the annual mean temperature of each city in 
	China from the database and writes it to a the newly created worksheet.
	
	Finally, the script uses the newly written data to generate a line chart
	(in excel) of this data.


1.4 - numpy_temp.py Description

	This script creates a new workbook (or opens an existing one) called
	"World Temperature.xlsx". It then creates a worksheet (or replaces an 
	existing one) called 'Comparison'.

	The script then retrieves data for mean temperature (by year) for all
	Australian states from the database, as well as corresponding national 
	temperature data.

	Using advanced data analysis python modules (including NumPy), the script
	calculates the yearly differences between each state and the national 
	averages. This data is then plotted (using MatPlotLib) and written into
	the newly created spreadsheet.


2 - Requirements and Assumptions

2.1 - General Requirements
	
	These scripts do not necessarily run in order, however each (with the 
	exception of db_create.py) requires a database ("Temperature_Data.db")
	with at least the three key tables ('Country', 'MajorCity' and 'State').
	
	The required database generated by db_create.py. Therefore, if 
	"Temperature_Data.db" is not located in the same directory as the script
	files, the user will be required to run db_create.py before the other
	scripts can be run successfully.

	Running with an incomplete database file (or without one), will result in 
	an error and program termination (including a prompt to run db_create.py).

	It is also assumed/required that each of the script files be located in
	and run from the same folder (as all file references are relative paths).

	Each script requires an installation of Python 3.6.1 (at least). They also
	(collectively) require the following python modules (version numbers are 
	the minimum required, using these is untested and may produce unpredictable
	results):

		NumPy* (version 1.12.1)
		Openpyxl* (version 2.5.0a2)
		Sqlite3* (version 3.13)
		Os.path
		Datetime		
		Matplotlib.pyplot* (version 2.0.2)

	Modules marked with a * are not included in the standard set of python 
	modules.

	Failure to comply with these requirements may result in unpredictable 
	behaviour (and success is not guaranteed).


2.2 - db_create.py Requirements

	Running this script requires the following workbooks (located in the same
	directory as the script file):

		GlobalLandTemperaturesByCountry.xlsx
		GlobalLandTemperaturesByMajorCity.xlsx
		GlobalLandTemperaturesByState.xlsx

	Each of these workbooks must contain at least one sheet and all relevant
	data must be in the first sheet (as this is the only one the program will
	read).
		
	Relevant spreadsheets MUST contain data with row headings in the first row
	with appropriate data in the following rows. The types of data in each sheet 
	(column-wise from left to right) must be as follows...
	
		GlobalLandTemperaturesByCountry.xlsx 
			Date 
			Decimal 
			Decimal
			String (maximum 30 characters)

		GlobalLandTemperaturesByMajorCity.xlsx
			Date 
			Decimal 
			Decimal
			String (maximum 30 characters)
			String (maximum 30 characters)
			String (maximum 9 characters)
			String (maximum 9 characters)

		GlobalLandTemperaturesByState.xlsx
			Date 
			Decimal 
			Decimal
			String (maximum 30 characters)
			String (maximum 30 characters)

	Any further columns will be ignored.

	The first column containing data must also be 'A'.
	
	There is no limit to the number of rows that each spreadsheet can have,
	HOWEVER, an increased number of rows will require more processing time. 
	
	It is the responsibility of the user that the data in the spreadsheets is 
	structured appropriately for the scripts.	

	Failure to comply with these requirements may result in incorrect database 
	schema, bugs and/or program crashes.
		

2.3 - sql_temp.py Requirements

	Running this script requires the existance of a database file 
	("Temperature_Data.db") located in the same directory as the script file.
	This file must contain the three tables: 'Country', 'MajorCity' and 'State'.
	Failure to comply with these requirements will result in the program
	returning an error.

	The database file must also be built on the Sqlite DBMS.

	
2.4 - excel_temp.py Requirements

	Running this script requires the existance of a database file 
	("Temperature_Data.db") located in the same directory as the script file.
	This file must contain the three tables: 'Country', 'MajorCity' and 'State'.
	Failure to comply with these requirements will result in the program
	returning an error.

	The database file must also be built on the Sqlite DBMS.


2.5 - numpy_temp.py Requirements

	Running this script requires the existance of a database file 
	("Temperature_Data.db") located in the same directory as the script file.
	This file must contain the three tables: 'Country', 'MajorCity' and 'State'.
	Failure to comply with these requirements will result in the program
	returning an error.

	The database file must also be built on the Sqlite DBMS.


3 - Usage Guide (All scripts)
	
	The following tips will ensure that the software runs smoothly and without error
	or analysis inaccuracy.

	1. Ensure that all script files are located in the same directory and that the
	   three required workbooks are also located in the same directory.

	2. Run db_create.py before all other scripts (follow the prompts as directed by 
	   the script).

	3. Run the remaining scripts in any order depending on the desired output.

		sql_temp.py will modify the existing database and add a new table and will
		also display maximum, minumum and average temperature data
		for Queensland (Australia) for the year 2000 (as described in section 1.2).

		excel_temp.py will generate a new spreadsheet in "World Temperature.xlsx"
		(and create the file if it does not exist) which will contain temperature 
		data for chinese cities and a line chart of this data.

		numpy_temp.py will perform data analysis (as described in section 1.4)
		and produce a plot of the calculated data. The plot will appear in a new 
		window (unless the script is run in an iPython console) and can be 
		saved/manipulated by the small toolset available in the
		window. Script run-time will be paused while this window is active (close
		the window to continue). The relevant data will also be added to a 
		spreadsheet in World Temperature.xlsx" (and create the file if it does not 
		exist).

	NOTE: When running any script, follow any prompts that appear.


4 - Additional Notes

4.1 - File Handling
	
	If running excel_temp.py, sql_temp.py or numpy_temp.py and the database cannot be found
	(or the required tables are not present), the user will be prompted to run the 
	db_create.py script before closing.

	When running db_create.py, if the database file does not exist, the script will
	automatically create a new one ("Temperature_Date.db"). If the file aready exists,
	the database file will be opened and all the data in it will be removed and replaced
	with data from the program.
	
	When running sql_temp.py, if the database already contains a table "Southern Cities",
	The table will be dropped (and the data removed) and replaced with one generated
	by the script.

	When running excel_temp.py or numpy_temp.py, if the output workbook 
	("World Temperature.xlsx") does not exist, it is created. If "World Temperature.xlsx"
	does exist already, the program will check for sheets with the standard names
	('Temperature by City' or 'Comparison' with the respective scripts). If the sheet
	does not exist, it is created. If the sheet already exists in the workbook, it
	is removed and replaced by a new one.

	If ever permanent changes are to be made to a file, the usesr is always warned
	before they are made (and given the opportunity to abort the process). This
	includes deleting database tables and excel spreadsheets.

4.2 - Missing Data

	When running db_create.py, if there are is data missing in the spreadsheet
	it will be added to the database as a null values. As a result, all attributes
	in table schemas allow null values (except for the key attributes). If a 
	column in the spreadsheet contains a blank cell under a key attribute, the
	program will return an error and proceed to the next record.

	When running the remaining scripts, any aggregate calculations will skip
	rows with a null value and not count these toward the calculation.

	In both excel_temp.py and numpy_temp.py, missing records are dealt with in a 
	similar way. While running either of these scripts there are two kinds of missing
	data, record data that is empty in the database (ie. has a null value), and data
	that does not exist (ie. there is an average temperature for Queensland in 1842, 
	however in there is not even an empty record for New South Wales for that year).

	In excel_temp.py, when relevant records for a city in a specific year do not even
	exist as empty records, the script handles it by keeping tabs on all possible years
	and cities, and adds empty records where appropriate. If the record is simply null,
	the openpyxl module will just ignore it when plotting the data.

	In numpy_temp.py, when state/national data is missing for a specific year (and a 
	record does not even exist as an empty record), empty records are added in the same
	way as they are in excel_temp.py. When querying the database, any null records retrieved
	are returned as None. When adding the data to a ndarray (of numpy), all None values are 
	automatically evaluated to 'nan' (Not A Number) and any operations involving 'nan'
	automatically return 'nan'. When the data is plotted, these values are ignored (as
	are the corresponding years). When adding the data to a spreadsheet, these values are
	added as '-'.

4.3 - Caching

	When running any of the scripts, during the first time that the saved database is opened since
	a computer reboot, it may take longer than usual to perform any the first query(s) on the 
	database. This is normal and may differ depending on the operating system being used.
	It occurs because the operating system needs to load the file into memory before
	operations can be conducted at faster speeds. Subsequent runs of each script will be at
	faster speeds. 

	However, the impact of having a slow database during the first runtime has been addressed
	by optimizing the database for use with the scripts. This has been done by indexing the
	relevant tables appropriately.

	It must also be noted that the individual script initializations (ie. importing various
	required python modules) will also run slower the first time they are run since a reboot
	(because the python modules need to be cached as well). Subsequent runs will be	faster.



